# day09

함수 (Method[Function])
	==> 한 가지 작업을 실행하기 위해서 만들어진 가장 작은 단위의 프로그램
		자바에서는 기능의 최소 단위
		
		프로그램이란?
		이런 함수들이 모여서 원하는 목적을 이루도록 구성하는 것
		
		따라서 프로그램을 제작한다는 것은, 이런 함수들을 작성하는 것이 될 것
		
		예]
			charAt() - 문자열에서 해당 위치에 있는 문자를 반환해주는 기능을 가진 함수
			random() - 0 ~ 1 사이의 난수를 발생해서 반환해주는 함수
			
	함수는 언제 만들어야 되는가?
		반복 작업이 많아지거나 클래스의 길이가 길어지는 경우에는
		만들어주는 것이 좋다
		
	***
	참고]
		1. 누군가 호출을 해주어야 실행된다
		2. 절대로 스스로 실행될 수 없다
		3. 실행이 완료되면 자신을 호출한 곳으로 실행 순서를 넘긴다
		
		예]
			class Test{
				
				public Test(){
					(0)
					abc();		<== 함수 호출
					(4)
				}
			
				void abc(){
					(1)
				}
				
				public static void main(String[] args){
						(2)
					new Test();
					
						(3)
				}
				
			}
			( abc() 호출 안 한 상태)실행순서 :
				2 -> 0 -> 3
				
			abc() 호출의 경우 실행순서 :
				2 -> 0 -> 1 -> 4 -> 3
				
----------------------------------------------

함수 만드는 방법
	형식]
		[접근지정자]	[속성]	반환값 타입	함수이름(매개변수리스트){
			함수 실행 내용
			
			[return	[데이터]	;]	==> 반환값이 없는 경우 return명령 생략 가능
		}
		
		1. 함수이름
			==> 작성자가 지정하는 사용자 정의어
			(소문자로 작성, 첫 글자 숫자 불가, 
			특수문자는 '_''$'만 가능, snake 및 camel 표기법)
			
		2. 매개변수리스트
			==> 변수형태로 만드는 것. 개수는 상관없다
			
			목적]
				작성하는 함수가 해야하는 일을 실행하기 위해서
				반드시 필요한 데이터가 있을 것이다
				그 데이터를 기억할 준비를 하는 것
				
			예]
				charAt(int pos)	==> 원하는 위치의 문자를 알려주는 함수
									이 함수가 원하는 작업을 수행하기 위해서는
									위치값(int pos)이 반드시 필요하다
									
				length()		==> 문자열의 길이를 알려주는 함수
									이 함수의 역할은
									문자열의 개수를 세어서 알려주는 것
									따라서 필요한 데이터가 따로 있지 않고,
									이 경우 매개변수는 필요하지 않다
									
		3. 반환값타입
			==> 함수는 한 가지 목적을 달성하기 위한 가장 작은 단위의 프로그램
				즉 함수를 실행한다는 말은 그 함수가 가진 목적을 달성한다는 것과 같다
				이 때 그 달성된 목적에 따라 결과가 존재해야할 것이다
				
				반환값타입은
				함수에게 뭔가 일을 시켰을 때, 그 함수가 일을 한 결과를 알려주는 것
				
				그런데 그 결과는 경우에 따라서 달라질 것이다
				결과는 존재하는 결과값의 경우에 따라서 달라지게 될 것이다
				
				***
				단순히 결과값의 데이터 종류만 선언하면 된다
				
			예]
				char charAt()	==> 이 함수의 결과는 문자로 알려주는 것이다
									따라서 반환값은 char 가 되어야 한다
									
		참고]
			함수의 실행 결과가 반드시 있는 것은 아니다
			예를 들어, 뭔가를 출력하는 기능을 담당하는 함수는
			출력을 하고 나면 그 함수가 가지는 기능을 모두 수행한 것이다
			따라서 이 경우 결과값은 없게 될 것이다
			
			이런 경우 반환값타입은 아무것도 안 쓰는 것이 아니고
			반드시
				void
			라고 써줘야 한다
			
		참고]
			함수는 가장 작은 한 가지 목적을 위해 만들어지는 프로그램이다
			따라서 반환값은
				*****
				한 개, 또는 없을 수 있다
			반환값이 2개 이상이 있는 함수는 자바에서는 절대로 존재하지 못한다
			(2개 이상을 뽑아야 되면 하나의 배열로 처리)
			
			예]
				int, float abc(){
					// 반환값타입이 두 개 이상인 함수는 절대로 존재할 수 없음
					// 잘못된 함수 작성
				}
				
		결론]
			함수는 4가지 형태를 벗어나지 않는다
				1. void abc(){}	==> 반환값 x, 매개변수 x
				
				2. int abc(){}	==> 반환값 o, 매개변수 x
				
				3. void abc(int a){}	==> 반환값 x, 매개변수 o
				
				4. int abc(int a){}	==> 반환값 o, 매개변수 o
				
		참고]
			return의 의미
				==> 함수 안에서 사용할 수 있는 명령
				의미]
					1. 함수의 실행을 종료하세요
						==> 함수의 실행을 즉시 종료하세요
					2. 함수의 결과는 '무엇'입니다
						==> 반환값이 있으면 반환해주고 즉시 종료하세요
						
				형식 1]
					return;	==> 함수의 실행을 즉시 종료하세요
					
				형식 2]
					return 데이터;
						==> 반환값이 있으면 반환해주고 즉시 종료하세요
						
			참고]
				반환값타입이 void인 경우는 반드시 return; 만 사용해야 한다
				반환값타입이 void가 아닌 경우는  반드시 
					return 데이터; 
				의 형식만 사용해야 한다
				
			참고]
				반환값이 void인 경우
					return 명령을 생략해도 된다
				왜? return 명령은 함수 블럭의 맨 아래쪽에 기술이 될 것이고
					그 말은 return 행을 실행한 후 함수의 내용이 끝날 것이기 때문에
					자동 종료가 될 것이다
					따라서 있으나 없으나 종료될 것이기 때문
					
---------------------------------------------

함수의 사용법
	==> 함수는 반드시 호출을 해야만 사용할 수 있다
		함수를 사용한다는 개념은 함수를 호출한다는 의미
		
		형식]
			함수이름(데이터, ...);
			
		데이터란?
			함수는 그 함수가 실행하기 위해 필요한 데이터를 받을 준비를 하고 있다
			==> (	매개변수리스트	)
			따라서 그 함수에 일을 시키기 위해서는 필요한 데이터를
			반드시 입력해줘야 한다
			
			결론적으로 데이터란
				함수가 준비하고 있는 매개변수리스트에 기억할 데이터를 제공하는 것
				
			따라서 데이터는 그 함수가 준비한 매개변수의 개수와 반드시 일치해야 하고
			(넘쳐도 안 되고 모자라도 안 된다)
			그 형태(데이터타입) 역시 일치해야 한다
			
			예]
				void abc(int a){
				
				}
				
				abc();		==>	X, 데이터의 개수가 다름
				abc(5);		==> O
				abc(3.14);	==> X, 데이터의 타입이 다름
				abc(3, 4);	==> X, 데이터의 개수가 다름
				
				==>
				void abc(int a){
					int a = 5;
				}
				이런 형식으로 데이터가 기억이 될 것이고
				따라서 변수 a는 abc()의 영역 내에서만 사용할 수 있는 
				지역변수가 된다
				
		반환값 사용 방법
		==> 함수의 실행이 종료되면 반환값을 함수가 줄 수 있다
			이 반환값은 함수 호출 부분에 그대로 돌아온다
			
			따라서 함수 호출 부분에 예상되는 반환값을 기록해봐서
			문법적으로 이상이 없으면 그것이 반환값 사용이 된다
			
			int abc(){
				int k = 10;
				return k;
			}
			void xyz(int a){
			
			}
			
			int lmn(int a){
				return 100;
			}
			
			*abc();				==>	O
			int a = abc();		==> O
			double b = abc();	==> O
			
			System.out.println(abc());	==> O. abc()의 결과는 10
			xyz(abc());			==> O
			
			lmn(abc());			==> O
			*abc(lmn());			==> X. abc()는 실행 시 데이터가 필요하지 않음
			
		*참고]
			반환값이 있는 함수라도
			필요하지 않는다면 반환값을 이용하지 않아도 된다
			
------------------------------------------------

문제 1]
	반지름을 랜덤하게 발생해서 그 반지름을 입력하면,
	원의 넓이를 구해주는 함수와 원의 둘레를 구해주는 함수를 제작하고
	실행해서 출력하세요
	
문제 2]
	1차 배열에 10개의 데이터를 입력한 후
	총점과 평균을 구하는 프로그램을 작성하세요
	단, 입력, 총점계산, 평균계산, 출력은 함수로 처리하세요
	
문제 3]
	다섯 학생의 국어, 영어, 수학, 물리, 국사 점수를 입력받아
	총점과 석차를 구하는 프로그램을 작성하세요
	단, 입력, 총점계산, 석차계산, 출력은 함수로 처리하세요
	
	단, 배열은 [5][7] 의 형태로 만드세요